%% Initialization
clear ; close all;
% Taking coefficients vector and organizing the first two rows
syms n K Ta Tg N s
chaeq = ((1/n*s+1)^n + K*(Ta*s+1))*s*Tg + N;

n=5; N=4;
chaeq_n = ((1/n*s+1)^n + K*(Ta*s+1))*s*Tg + N;
coefficients = fliplr(coeffs(chaeq_n, s));

coeffVector = coefficients;
ceoffLength = length(coeffVector);
rhTableColumn = round(ceoffLength/2);
%  Initialize Routh-Hurwitz table with empty zero array
rhTable = sym(zeros(ceoffLength,rhTableColumn));
%  Compute first row of the table
rhTable(1,:) = coeffVector(1,1:2:ceoffLength);
%  Check if length of coefficients vector is even or odd
if (rem(ceoffLength,2) ~= 0)
    % if odd, second row of table will be
    rhTable(2,1:rhTableColumn - 1) = coeffVector(1,2:2:ceoffLength);
else
    % if even, second row of table will be
    rhTable(2,:) = coeffVector(1,2:2:ceoffLength);
end
%% Calculate Routh-Hurwitz table's rows
%  Set epss as a small value
epss = sym(0.01);
%  Calculate other elements of the table
for i = 3:ceoffLength
   
    %  special case: row of all zeros
%     if rhTable(i-1,:) == 0
%         order = (ceoffLength - i);
%         cnt1 = 0;
%         cnt2 = 1;
%         for j = 1:rhTableColumn - 1
%             rhTable(i-1,j) = (order - cnt1) * rhTable(i-2,cnt2);
%             cnt2 = cnt2 + 1;
%             cnt1 = cnt1 + 2;
%         end
%     end
    
    for j = 1:rhTableColumn - 1
        %  first element of upper row
        firstElemUpperRow = rhTable(i-1,1);
        
        %  compute each element of the table
        rhTable(i,j) = ((rhTable(i-1,1) * rhTable(i-2,j+1)) - ....
            (rhTable(i-2,1) * rhTable(i-1,j+1))) / firstElemUpperRow;
    end
    
    
    %  special case: zero in the first column
    if rhTable(i,1) == 0
        rhTable(i,1) = epss;
    end
end
%%  Compute number of right hand side poles(unstable poles)
%   Initialize unstable poles with zero
% unstablePoles = 0;
% %   Check change in signs
% for i = 1:ceoffLength - 1
%     if sign(rhTable(i,1)) * sign(rhTable(i+1,1)) == -1
%         unstablePoles = unstablePoles + 1;
%     end
% end
%   Print calculated data on screen
fprintf('\n Routh-Hurwitz Table:\n')
rhTable

%% Plot
Tg_sets=[5,10,20];
num_Tg = numel(Tg_sets);
K_sets=-1:0.01:3; Ta_sets=0:0.05:10.0;
num_K = numel(K_sets); num_Ta = numel(Ta_sets);
Ks = nan(num_Tg,num_K); Tas = nan(num_Tg,num_K);

for t = 1:num_Tg
    eq = coefficients;
    eq_t = subs(eq, Tg, Tg_sets(t));
    for i = 1:num_K
        eq_k = subs(eq_t, K, K_sets(i));
        for j = 1:num_Ta
%             eq = coefficients;
%             eq = subs(eq, Tg, Tg_sets(t));
%             eq = subs(eq, K, K_sets(i));1
%             eq = subs(eq, Ta, Ta_sets(j));
            eq_a = subs(eq_k, Ta, Ta_sets(j));
            if K_sets(i)>0 && Ta_sets(j)<0.1
                continue
            end
            poles = roots(eq_a);
            if max(real(poles))>0
                Ks(t,i) = K_sets(i);
                Tas(t,i) = Ta_sets(j);
                break
            end
        end
        disp(i)
    end
end